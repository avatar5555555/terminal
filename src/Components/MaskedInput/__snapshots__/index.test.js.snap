// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MInput renders 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alwaysShowMask": false,
      "maskChar": "",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alwaysShowMask": false,
        "maskChar": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`MaskedInput renders 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MaskedInput
    className="string"
    error=""
    id="string"
    mask="string"
    onBlur={[Function]}
    onChange={[Function]}
    valid={true}
    value=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(InputLabel)
          error={false}
          htmlFor="string"
>
          <FormattedMessage
                    id="Form.string"
                    values={Object {}}
          />
</WithStyles(InputLabel)>,
        <WithStyles(Input)
          error={false}
          id="string"
          inputComponent={[Function]}
          inputProps={
                    Object {
                              "mask": "string",
                            }
          }
          onBlur={[Function]}
          onChange={[Function]}
          value=""
/>,
        false,
      ],
      "className": "string",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <FormattedMessage
            id="Form.string"
            values={Object {}}
/>,
          "error": false,
          "htmlFor": "string",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "Form.string",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "error": false,
          "id": "string",
          "inputComponent": [Function],
          "inputProps": Object {
            "mask": "string",
          },
          "onBlur": [Function],
          "onChange": [Function],
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(InputLabel)
            error={false}
            htmlFor="string"
>
            <FormattedMessage
                        id="Form.string"
                        values={Object {}}
            />
</WithStyles(InputLabel)>,
          <WithStyles(Input)
            error={false}
            id="string"
            inputComponent={[Function]}
            inputProps={
                        Object {
                                    "mask": "string",
                                  }
            }
            onBlur={[Function]}
            onChange={[Function]}
            value=""
/>,
          false,
        ],
        "className": "string",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormattedMessage
              id="Form.string"
              values={Object {}}
/>,
            "error": false,
            "htmlFor": "string",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "Form.string",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "error": false,
            "id": "string",
            "inputComponent": [Function],
            "inputProps": Object {
              "mask": "string",
            },
            "onBlur": [Function],
            "onChange": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`MaskedInput renders with valid === false 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MaskedInput
    className="string"
    error=""
    id="string"
    mask="string"
    onBlur={[Function]}
    onChange={[Function]}
    valid={false}
    value=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(InputLabel)
          error={true}
          htmlFor="string"
>
          <FormattedMessage
                    id="Form.string"
                    values={Object {}}
          />
</WithStyles(InputLabel)>,
        <WithStyles(Input)
          error={true}
          id="string"
          inputComponent={[Function]}
          inputProps={
                    Object {
                              "mask": "string",
                            }
          }
          onBlur={[Function]}
          onChange={[Function]}
          value=""
/>,
        <WithStyles(FormHelperText)
          error={true}
          id="string-helper-text"
>
          <FormattedMessage
                    id="Errors."
                    values={Object {}}
          />
</WithStyles(FormHelperText)>,
      ],
      "className": "string",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <FormattedMessage
            id="Form.string"
            values={Object {}}
/>,
          "error": true,
          "htmlFor": "string",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "Form.string",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "error": true,
          "id": "string",
          "inputComponent": [Function],
          "inputProps": Object {
            "mask": "string",
          },
          "onBlur": [Function],
          "onChange": [Function],
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <FormattedMessage
            id="Errors."
            values={Object {}}
/>,
          "error": true,
          "id": "string-helper-text",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "Errors.",
            "values": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(InputLabel)
            error={true}
            htmlFor="string"
>
            <FormattedMessage
                        id="Form.string"
                        values={Object {}}
            />
</WithStyles(InputLabel)>,
          <WithStyles(Input)
            error={true}
            id="string"
            inputComponent={[Function]}
            inputProps={
                        Object {
                                    "mask": "string",
                                  }
            }
            onBlur={[Function]}
            onChange={[Function]}
            value=""
/>,
          <WithStyles(FormHelperText)
            error={true}
            id="string-helper-text"
>
            <FormattedMessage
                        id="Errors."
                        values={Object {}}
            />
</WithStyles(FormHelperText)>,
        ],
        "className": "string",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormattedMessage
              id="Form.string"
              values={Object {}}
/>,
            "error": true,
            "htmlFor": "string",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "Form.string",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "error": true,
            "id": "string",
            "inputComponent": [Function],
            "inputProps": Object {
              "mask": "string",
            },
            "onBlur": [Function],
            "onChange": [Function],
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <FormattedMessage
              id="Errors."
              values={Object {}}
/>,
            "error": true,
            "id": "string-helper-text",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "Errors.",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
